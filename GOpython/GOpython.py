
import sys

from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

import numpy as np
import matplotlib.pyplot as plt

import datetime
from datetime import timedelta
import time
import calendar
import threading
import queue

import random
import math


# POSX = np.array([0, 25, 60, 95, 130, 165, 200, 235, 270, 305, 340,
#                 375, 410, 445, 480, 515, 550, 585, 620, 655, 0], dtype=np.int_)
# POSY = np.array([0, 25, 60, 95, 130, 165, 200, 235, 270, 305, 340,
#                 375, 410, 445, 480, 515, 550, 585, 620, 655, 0], dtype=np.int_)
POSX = np.array([0, 30, 81, 132, 183, 234, 285, 336, 387, 438, 489,
                 540, 591, 642, 693, 744, 795, 846, 897, 948, 0], dtype=np.int_)
POSY = np.array([0, 30, 81, 132, 183, 234, 285, 336, 387, 438, 489,
                 540, 591, 642, 693, 744, 795, 846, 897, 948, 0], dtype=np.int_)


GD = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0], dtype=np.int_)
DT = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=np.int_)

potential = np.array([  # 勢力分佈表 Power distribution table
    # 0 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int_)  # 0

win = np.array([  # 佔地評分表 Land occupation score sheet
    # 0 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int_)  # 0

help = np.array([  # 支援評分表  Support score sheet
    # 0 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int_)  # 0

DIJ = np.array([  # 佔地影響力 Land occupation influence
    [0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0],
    [0, 0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0, 0, 0],
    [0, 0,  0,  0,  0,  0, 10, 20, 10,  0,  0,  0,  0, 0, 0],
    [0, 0,  0,  0,  0, 10, 20, 30, 20, 10,  0,  0,  0, 0, 0],
    [0, 0,  0,  0, 10, 20, 30, 60, 30, 20, 10,  0,  0, 0, 0],
    [0, 0,  0, 10, 20, 30, 60, 100, 60, 30, 20, 10,  0, 0, 0],
    [0, 0, 10, 20, 30, 60, 100, 150, 100, 60, 30, 20, 10, 0, 0],
    [0, 10, 20, 30, 60, 100, 150,  0, 150, 100, 60, 30, 20, 10, 0],
    [0, 0, 10, 20, 30, 60, 100, 150, 100, 60, 30, 20, 10, 0, 0],
    [0, 0,  0, 10, 20, 30, 60, 100, 60, 30, 20, 10,  0, 0, 0],
    [0, 0,  0,  0, 10, 20, 30, 60, 30, 20, 10,  0,  0, 0, 0],
    [0, 0,  0,  0,  0, 10, 20, 30, 20, 10,  0,  0,  0, 0, 0],
    [0, 0,  0,  0,  0,  0, 10, 20, 10,  0,  0,  0,  0, 0, 0],
    [0, 0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0, 0, 0],
    [0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0]], dtype=np.int_)  # 0

PFT = np.array([  # 位置因素表 Location factor table
    [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0, 0],
    [0, 120, 100, 95, 90, 85, 80, 75, 70, 65, 65,
        65, 70, 75, 80, 85, 90, 95, 100, 120, 0],
    [0, 100, 65, 47, 29, 35, 39, 41, 43, 45, 47,
        45, 43, 41, 39, 35, 29, 47, 65, 100, 0],
    [0, 95, 47, 20, 25, 32, 35, 38, 40, 42, 44,
        42, 40, 38, 35, 32, 25, 20, 47, 95, 0],
    [0, 90, 29, 25, 30, 36, 38, 40, 43, 45, 49,
        45, 43, 40, 38, 36, 30, 25, 29, 90, 0],
    [0, 85, 35, 32, 36, 45, 46, 48, 50, 52, 55,
        52, 50, 48, 46, 45, 36, 32, 35, 85, 0],
    [0, 80, 39, 35, 38, 46, 55, 56, 57, 58, 59,
        58, 57, 56, 55, 46, 38, 35, 39, 80, 0],
    [0, 75, 41, 38, 40, 48, 56, 60, 60, 60, 60,
        60, 60, 60, 56, 48, 40, 38, 41, 75, 0],
    [0, 70, 43, 40, 43, 50, 57, 60, 60, 60, 60,
        60, 60, 60, 57, 50, 43, 40, 43, 70, 0],
    [0, 65, 45, 42, 45, 52, 58, 60, 60, 60, 60,
        60, 60, 60, 58, 52, 45, 42, 45, 65, 0],
    [0, 65, 47, 44, 49, 55, 59, 60, 60, 60, 60,
        60, 60, 60, 59, 55, 49, 44, 47, 65, 0],
    [0, 65, 45, 42, 45, 52, 58, 60, 60, 60, 60,
        60, 60, 60, 58, 52, 45, 42, 45, 65, 0],
    [0, 70, 43, 40, 43, 50, 57, 60, 60, 60, 60,
        60, 60, 60, 57, 50, 43, 40, 43, 70, 0],
    [0, 75, 41, 38, 40, 48, 56, 60, 60, 60, 60,
        60, 60, 60, 56, 48, 40, 38, 41, 75, 0],
    [0, 80, 39, 35, 38, 46, 55, 56, 57, 58, 59,
        58, 57, 56, 55, 46, 38, 35, 39, 80, 0],
    [0, 85, 35, 32, 36, 45, 46, 48, 50, 52, 55,
        52, 50, 48, 46, 45, 36, 32, 35, 85, 0],
    [0, 90, 29, 25, 30, 36, 38, 40, 43, 45, 49,
        45, 43, 40, 38, 36, 30, 25, 29, 90, 0],
    [0, 95, 47, 20, 25, 32, 35, 38, 40, 42, 44,
        42, 40, 38, 35, 32, 25, 20, 47, 95, 0],
    [0, 100, 65, 47, 29, 35, 39, 41, 43, 45, 47,
        45, 43, 41, 39, 35, 29, 47, 65, 100, 0],
    [0, 120, 100, 95, 90, 85, 80, 75, 70, 65, 65,
        65, 70, 75, 80, 85, 90, 95, 100, 120, 0],
    [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
        0,  0,  0,  0,  0,  0,  0,  0,  0, 0]], dtype=np.int_)  # 0

PWT = np.array([  # 位置加權表 Position weighting table
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9,
        10, 10, 11, 11, 12, 12, 13, 13, 14, 0],
    [0, 13, 13, 12, 11, 10, 9, 8, 8, 8, 8, 8, 8, 8, 9, 10, 11, 12, 13, 13, 0],
    [0, 13, 12, 12, 11, 9, 8, 7, 7, 7, 7, 7, 7, 7, 8, 9, 11, 12, 12, 13, 0],
    [0, 12, 11, 11, 10, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 8, 10, 11, 11, 12, 0],
    [0, 12, 10, 9, 8, 7, 6, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10, 12, 0],
    [0, 11, 9, 8, 7, 6, 5, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 11, 0],
    [0, 11, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 11, 0],
    [0, 10, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 10, 0],
    [0, 10, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 10, 0],
    [0, 9, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 0],
    [0, 10, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 10, 0],
    [0, 10, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 10, 0],
    [0, 11, 8, 7, 6, 5, 4, 3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 11, 0],
    [0, 11, 9, 8, 7, 6, 5, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 11, 0],
    [0, 12, 10, 9, 8, 7, 6, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10, 12, 0],
    [0, 12, 11, 11, 10, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 8, 10, 11, 11, 12, 0],
    [0, 13, 12, 12, 11, 9, 8, 7, 7, 7, 7, 7, 7, 7, 8, 9, 11, 12, 12, 13, 0],
    [0, 13, 13, 12, 11, 10, 9, 8, 8, 8, 8, 8, 8, 8, 9, 10, 11, 12, 13, 13, 0],
    [0, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9,
        10, 10, 11, 11, 12, 12, 13, 13, 14, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=np.int_)

GBbasic = np.array([
    # 0 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, - \
        1, -1, -1, -1, -1, -1, -1, -1, -1, -1],  # 0
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 1
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 2
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 3
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 4
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 5
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 6
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 7
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 8
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 9
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 10
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 11
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 12
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 13
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 14
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 15
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 16
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 17
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 18
    [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],  # 19
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], dtype=np.int_)  # 0

GOW = 51  # 35
GOH = 51  # 35
GODNO = 0  # 下子順序
SPXO = 30  # 25+2;
SPYO = 30  # 114+6+14-1-10+3;

FrameTitle = ''
timestr = ''
timestring = ''
WhiteStringNo = 2  # 白子串子序號
BlackStringNo = 1  # 黑子串子序號
STRINGNO = 1  # 目前串子序號
StringNumonoff = 0
LifeNumonoff = 0
GoLife_onoff = 0
LifeDataOnOff = 0
StringDataOnOff = 0
PotentialTableOnOff = 0
GoDataOnOff = 0
XXX = 1
YYY = 1
KKK = 0
XXX1 = 1
YYY1 = 1
GPN = 0  # 棋點代號
GBW = 1  # 棋種代號
PLAYTYPE = 0  # 0=人_人,1=人_電腦,2=電腦_電腦,3=電腦連線電腦
PlayModel = ""
PlayModelnum = 1
played = 0
# PlayType = -1;//0=人_人,1=人_電腦,2=電腦_電腦,3=電腦連線電腦
BDtype = 1
NUMONOFF = 0
SCREENWINDOW = 0
XYONOFF = 0
GOYESNO = 1  # 是否允許落子  0=不允許  1=允許
# displayed0 = -1
btcmd = ""
GODOWNj = 0
GODOWNi = 0
IsGoDown = 0
GoDowned = 0
GoSelected = 0
ChangeFormPOSed = 0
FormPOSnum = 0
TEXTROWX = 0  # 文字顯示區 X起始座標
TEXTROWW = 0
FrameW = 0
FrameH = 0
SD = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""]
StringDim = ""
xtext = ["", "A", "B", "C", "D", "E", "F", "G", "H", "J",
         "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", ""]
ytext = ["", "19", "18", "17", "16", "15", "14", "13", "12",
         "11", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1", ""]
# textXY = ["", "a", "b", "c", "d", "e", "f", "g", "h",
#          "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", ""]
textXY = ["", "a", "b", "c", "d", "e", "f", "g", "h",
          "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", ""]
textBW = ["", "B", "W", ""]
BDcoordinateXY = ["", "a", "b", "c", "d", "e", "f", "g", "h", "i",
                  "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", ""]
BDcoordinate = [
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
    ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"]
]

BNAME = "Computer"  # 黑子
BPOWER = "00.00"  # "  段  級"
BPOS = "000.000.000.000"
BWIN = 0  # public String BWIN="提子數: 000"
BWINTOTAL = 0  # public String BWINTOTAL="佔地數: 000"
WNAME = "Player"  # 白子
WPOWER = "00.00"  # "  段  級"
WPOS = "000.000.000.000"
WWIN = 0  # public String WWIN="提子數: 000"
WWINTOTAL = 0  # public String WWINTOTAL="佔地數: 000"
BasicName = "Chess House - GO v1.0"
GOMSGDATA = ""
TEXTLINENUM = 0  # public String WWIN="提子數: 000"
GPDtxtName = ""
BSS = 0
BMM = 0
WSS = 0
WMM = 0
GoDisplay = 0
BTime = "00:00:00"
BTime_1 = 0
BTime_2 = 0
BTimenew = 0
BTime1 = 0
BTime2 = 0
BTime3 = 0
WTime = "00:00:00"
WTime_1 = 0
WTime_2 = 0
WTimenew = 0
WTime1 = 0
WTime2 = 0
WTime3 = 0
BTM = "0"
WTM = "0"
TimeCheck = 0
StartTime = ""
GoStartTime = ""
GOPLAYFILENO = 0
Bplayer = 1
Wplayer = 0
BWplayer = 1
GODNOcheck = 0
GODOWNcheck = 0
MDXcheck = 0
MDYcheck = 0
GOTEXT = ""
GODX = -10
GODY = -10
GOTYPE = 0
newText = ""
newTextTemp = ""
JFtitle = ""
MDX = 0
MDY = 0
NEWX = 0
NEWY = 0
TimeCount = 0
Time = ""
Timeold = ""
TBTnum = 20
ButtonCheck = 0
GX = 0
GY = 0
TXTnum = 35
GDNDATA = 0
GDDnum = 20
STstring = ""
CD = ""
# -----------------------------------------------------------------------------
stringdata = [["0"]*363 for ay in range(363)]  # 資料修正
for ay in range(363):  # 列
    # for ax in range(11):  # 行
    for ax in range(363):  # 行
        stringdata[ay][ax] = "0"
# -----------------------------------------------------------------------------
# stringdata = [[0]*11 for ay in range(362)]  # 資料修正
stringlife = [[0]*363 for by in range(363)]  # 資料修正
for by in range(363):  # 列
    # for ax in range(11):  # 行
    for bx in range(363):  # 行
        stringlife[by][bx] = 0
# -----------------------------------------------------------------------------
stringlifeXY = [["0"]*363 for cy in range(363)]  # 資料修正
for cy in range(363):  # 列
    for cx in range(363):  # 行
        stringlifeXY[cy][cx] = "0"
# -----------------------------------------------------------------------------
stringdata0 = np.array([
    # 0  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 1
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 2
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 3
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 4
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 5
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 6
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 7
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 8
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 9
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 10
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 11
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 12
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 13
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 14
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 15
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 16
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 17
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 18
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0  # 19
], dtype=np.int_)
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
stringlife0 = np.array([
    # 0  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 1
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 2
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 3
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 4
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 5
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 6
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 7
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 8
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 9
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 10
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 11
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 12
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 13
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 14
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 15
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 16
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 17
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 18
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0  # 19
], dtype=np.int_)
# -----------------------------------------------------------------------------
SRLdata = [
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00",
    "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00", "00"
]
# -----------------------------------------------------------------------------
SPNO = np.array([3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 3,
                 3, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 3,
                 3, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 3,
                 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 3,
                 3, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 3,
                 3, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 3,
                 3, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 3,
                 3, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 3,
                 3, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 3,
                 3, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 3,
                 3, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 3,
                 3, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 3,
                 3, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 3,
                 3, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 3,
                 3, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 3,
                 3, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 3,
                 3, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 3,
                 3, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 3,
                 3, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 3,
                 3, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 3,
                 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 3
                 ], dtype=np.int_)

PNO = np.array([
    # 0  1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18
    22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
    64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
    85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
    127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
    148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,
    190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
    211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229,
    232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
    253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
    274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292,
    295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313,
    316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
    337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355,
    358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,
    379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397,
    400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418
], dtype=np.int_)

PN = np.array([
    # 0  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 1
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 2
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 3
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 4
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 5
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 6
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 7
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 8
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 9
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 10
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 11
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 12
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 13
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 14
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 15
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 16
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 17
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  # 18
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0  # 19
], dtype=np.int_)

SPTYPE = np.array([
    # 0 1  2  3   4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 0],  # 1
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 4, 0],  # 2
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 3
    [0, 8, 9, 9, 10, 9, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 10, 9, 9, 4, 0],  # 4
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 5
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 6
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 7
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 8
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 9
    [0, 8, 9, 9, 10, 9, 9, 9, 9, 9, 10, 9,
     9, 9, 9, 9, 10, 9, 9, 4, 0],  # 10
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 11
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 12
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 13
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 14
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 15
    [0, 8, 9, 9, 10, 9, 9, 9, 9, 9, 10, 9,
     9, 9, 9, 9, 10, 9, 9, 4, 0],  # 16
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 17
    [0, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
     9, 9, 9, 9, 9, 9, 9, 4, 0],  # 18
    [0, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
     6, 6, 6, 6, 6, 6, 6, 5, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
], dtype=np.int_)

MFBI = np.array([
    # 1, 2, 3 ,4 ,5 ,6 ,7 ,8 ,9 ,10,11,12,13,14,15,16,17,18,19,0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 0
], dtype=np.int_)

BDBW = np.array([
    # 0 1  2  3   4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    [3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
        3,  3,  3,  3,  3,  3,  3,  3,  3, 3],  # 0
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 1
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 2
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 3
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 4
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 5
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 6
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 7
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 8
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0, 3],  # 9
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 10
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 11
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 12
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 13
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 14
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 15
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 16
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 17
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 18
    [3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0, 3],  # 19
    [3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3,  3,  3,  3,  3,  3,  3, 3]  # 0
], dtype=np.int_)

BDGN = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 0
], dtype=np.int_)

BDSN = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 0
], dtype=np.int_)

BDCD = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 0
], dtype=np.int_)

BDCC = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 0
], dtype=np.int_)


BDLD = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 0
], dtype=np.int_)

BDSLC = np.array([
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]  # 0
], dtype=np.int_)

GOBW = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
                 ], dtype=np.int_)

GOX = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
                ], dtype=np.int_)

GOY = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
                ], dtype=np.int_)

GOOUT = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
                  ], dtype=np.int_)

SRBW = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
                 ], dtype=np.int_)

SRNUM = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
                  ], dtype=np.int_)

SRDT = np.array([
    # 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  0
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  1
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 1  9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 2
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 3
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 4
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 5
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 6
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 7
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 8
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 9
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 10
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 11
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 12
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 13
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 14
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 15
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 16
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  # 17
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # 18
     ]], dtype=np.int_)
# ------------------------------------------------------------------------------
GObasic = [["Bdd", "Bpd", "Bqn", "Bdc"], ["Bpp", "Bqd", "Boc", "Bqn"],
           ["Bcp", "Bdd", "Bqe", "Bod"], ["Bpd", "Bqc", "Bod", "Bqe"],
           ["Bcd", "Bpp", "Bqe", "Bod"], ["Bdp", "Bdd", "Bnc", "Bdq"],
           ["Bqp", "Bdd", "Bqd", "Bqo"], ["Bpp", "Bdd", "Bpd", "Bdp"],
           ["Bpp", "Bqd", "Bfc", "Bqp"], ["Bdq", "Bpc", "Bec", "Bdn"],
           ["Boj", "Bqq", "Boq", "Bop"], ["Bdp", "Bdd", "Bqq", "Bpo"],
           ["Bcp", "Bpd", "Bec", "Bdo"], ["Bqd", "Bdc", "Bqn", "Bfd"],
           ["Bdp", "Bpp", "Bcc", "Bdc"], ["Bmm", "Bpq", "Brq", "Bqr"],
           ["Bcp", "Bfp", "Bdd", "Bcg"], ["Bdc", "Bpd", "Boq", "Beq"],
           ["Bdd", "Bdp", "Bqq", "Bqp"], ["Bpd", "Bqc", "Brd", "Bqe"],
           ["Bdp", "Bdd", "Bnc", "Bdq"], ["Bdp", "Bdd", "Bnq", "Bcd"],
           ["Bpp", "Bdp", "Bkq", "Boh"], ["Bjg", "Bqc", "Bpb", "Brd"],
           ["Bdp", "Bdd", "Bnc", "Bdq"], ["Bdp", "Bnc", "Bpp", "Bnd"],
           ["Bpd", "Bde", "Bjq", "Bfp"], ["Blg", "Bpb", "Bqc", "Bqd"],
           ["Bdd", "Bpd", "Bqn", "Bdc"], ["Bpp", "Bpc", "Bfc", "Bcf"],
           ["Bqd", "Bdo", "Bqo", "Bop"], ["Bli", "Brd", "Bre", "Brf"],
           ["Bpc", "Bpf", "Bdd", "Bfc"], ["Bpp", "Bpd", "Bfq", "Bqd"],
           ["Bqd", "Bdp", "Bce", "Bpe"], ["Bpp", "Bpd", "Bdd", "Bdp"],
           ["Bpd", "Bdc", "Boq", "Bop"], ["Bdp", "Bpp", "Bqc", "Bpc"],
           ["Bpe", "Bdp", "Bqn", "Bpm"], ["Bpd", "Bpp", "Bcq", "Bcp"],
           ["Bpc", "Bcd", "Bpf", "Bec"], ["Bqd", "Bpp", "Bnc", "Bpc"],
           ["Bpd", "Bqc", "Bpc", "Bnc"], ["Bpp", "Bqd", "Bfc", "Bqg"],
           ["Bdp", "Bdd", "Bnc", "Bdq"], ["Bpq", "Bdp", "Bpn", "Bhq"],
           ["Bpd", "Bdd", "Bqq", "Bpq"], ["Bjk", "Bcp", "Bcd", "Bop"],
           ["Bdp", "Bpp", "Bqc", "Bqd"], ["Bdp", "Bdd", "Bnc", "Bqq"],
           ["Bpp", "Bep", "Bco", "Bdo"], ["Bpp", "Bpc", "Bdo", "Bcn"],
           ["Bqd", "Bqp", "Bop", "Boc"], ["Bpd", "Bdd", "Bqn", "Bdc"],
           ["Bqp", "Bdd", "Boc", "Bpe"], ["Bdl", "Bdj", "Bql", "Bsh"],
           ["Bqd", "Bpp", "Bfc", "Bdb"], ["Bpd", "Bdc", "Bdf", "Bqd"],
           ["Bpp", "Bqc", "Bqd", "Bpe"], ["Bmg", "Bqd", "Bpe", "Bod"],
           ["Bqd", "Bpq", "Boc", "Bqk"], ["Bpd", "Bpp", "Bcq", "Bdq"],
           ["Bdp", "Bdd", "Bnc", "Bqq"], ["Bgh", "Bcc", "Bkp", "Bgk"],
           ["Bpp", "Bqd", "Boc", "Bqn"], ["Bdp", "Bdd", "Bnc", "Bdq"],
           ["Bpq", "Bdp", "Bqc", "Bcc"], ["Bpd", "Bdd", "Bcn", "Bcd"],
           ["Bmr", "Bcl", "Bpl", "Bgd"], ["Bmc", "Bmo", "Bfc", "Bnn"],
           ["Bpc", "Bpf", "Bdd", "Bfc"], ["Bpp", "Bdp", "Bqc", "Bpc"],
           ["Bdp", "Beq", "Bfq", "Bdq"], ["Bpp", "Bdp", "Bpd", "Bdd"],
           ["Bpd", "Bed", "Bpo", "Bpq"], ["Bpp", "Bdp", "Bqf", "Bdq"],
           ["Bdp", "Bpp", "Bcc", "Bcd"], ["Bdq", "Bpp", "Bdo", "Bqf"],
           ["Bdp", "Beq", "Bdd", "Bpd"], ["Bhe", "Beq", "Bcs", "Bhi"],
           ["Bpp", "Bqd", "Boc", "Ble"], ["Bpd", "Bpp", "Bfc", "Bic"],
           ["Bpc", "Bdd", "Bpf", "Bgc"], ["Bdn", "Bki", "Bdf", "Bhp"],
           ["Bbb", "Bbc", "Ben", "Bfo"], ["Bpd", "Bcd", "Bec", "Bnd"],
           ["Bpd", "Bpp", "Bcc", "Bcd"], ["Bpc", "Bdd", "Bpf", "Bfc"],
           ["Bcr", "Bcq", "Bjh", "Bom"], ["Bal", "Bei", "Bga", "Bpk"],
           ["Bpd", "Bqq", "Bpq", "Bnr"], ["Bdd", "Bdp", "Bqc", "Bqd"],
           ["Bqd", "Bdp", "Bfc", "Bdb"], ["Bdp", "Bpd", "Bpp", "Bdd"],
           ["Bjp", "Bqk", "Bbp", "Bfm"], ["Bcp", "Bfp", "Bdd", "Bcg"],
           ["Bpp", "Bpd", "Bdp", "Bhe"], ["Bdp", "Bnc", "Bpp", "Bqp"],
           ["Bje", "Bcd", "Bbc", "Bbe"], ["Bdp", "Bcd", "Bpp", "Bpd"],
           ["Bpq", "Bdd", "Bep", "Bfq"], ["Bdp", "Bpp", "Bcf", "Bqc"],
           ["Bdd", "Bqd", "Bdq", "Bfp"], ["Bfj", "Ben", "Bgj", "Bbm"],
           ["Bqk", "Bbj", "Bbi", "Bai"], ["Bcp", "Bpp", "Boc", "Bgp"],
           ["Bdc", "Bdf", "Bpd", "Bnc"], ["Bdp", "Bpp", "Bqf", "Bcc"],
           ["Bqe", "Bpi", "Boq", "Bpo"], ["Bpp", "Bdp", "Bpd", "Bdd"],
           ["Bdd", "Bdp", "Bqq", "Bpq"], ["Bdd", "Bpd", "Bpp", "Bdp"],
           ["Bpc", "Bdp", "Bce", "Bed"], ["Bbj", "Bqn", "Bnl", "Bkd"],
           ["Bfd", "Bep", "Bdo", "Bed"], ["Bpd", "Bpp", "Bfq", "Bqd"],
           ["Bpp", "Bqd", "Boc", "Bkc"], ["Bpb", "Bio", "Bnq", "Bqj"],
           ["Bqd", "Bdp", "Boq", "Bpo"], ["Bpd", "Bdq", "Bdc", "Bhd"],
           ["Bpd", "Bdd", "Bqn", "Bcq"], ["Bdp", "Bdd", "Bnc", "Bdq"],
           ["Bdq", "Bdn", "Bdc", "Bpq"], ["Bbn", "Boq", "Bom", "Bkl"],
           ["Bpd", "Bqq", "Bqp", "Brn"], ["Bdp", "Bpp", "Bqf", "Bnc"],
           ["Bdp", "Bdd", "Bpd", "Bpp"], ["Bpp", "Bqd", "Boc", "Bco"],
           ["Bdd", "Bdp", "Bqq", "Bqp"], ["Bdc", "Bdf", "Bpp", "Bcq"],
           ["Bdp", "Bpd", "Bce", "Boq"], ["Bpp", "Bdd", "Bdp", "Bhc"],
           ["Bpp", "Bpd", "Bfq", "Beo"], ["Bdp", "Bdd", "Bnc", "Bdq"],
           ["Bpd", "Bdd", "Bcq", "Bdq"], ["Bho", "Bdc", "Bed", "Bee"],
           ["Bcd", "Bpp", "Bqe", "Bco"], ["Bqd", "Bod", "Bpp", "Bqn"],
           ["Bdp", "Bpp", "Bqf", "Bcc"], ["Bqc", "Bpb", "Brb", "Bpd"],
           ["Bdq", "Bdn", "Bqp", "Boq"], ["Bpp", "Bqd", "Boc", "Bhl"],
           ["Bdp", "Bdd", "Bqo", "Bop"], ["Bpp", "Bqo", "Bop", "Bqp"],
           ["Bcp", "Bpp", "Bec", "Boc"], ["Bdp", "Bdd", "Bnc", "Bqq"],
           ["Bpp", "Bqd", "Bfc", "Bhe"], ["Bpd", "Bqe", "Bpc", "Boe"],
           ["Bpp", "Bqd", "Bfc", "Bod"], ["Bdp", "Bcq", "Bep", "Bco"],
           ["Bpd", "Bqn", "Bqk", "Bep"], ["Bpc", "Bdd", "Beq", "Boq"],
           ["Bcp", "Bfp", "Bdd", "Bcg"], ["Bpp", "Bpd", "Bcc", "Bdc"],
           ["Bdp", "Bpp", "Bqf", "Bcc"], ["Bbe", "Bqd", "Bod", "Bqb"],
           ["Bdp", "Bdd", "Bnc", "Bcp"], ["Bdp", "Bdd", "Bnc", "Bqf"],
           ["Bod", "Brp", "Bro", "Brn"], ["Bpp", "Bpd", "Bdp", "Bnd"],
           ["Bpp", "Bpd", "Bfc", "Bqp"], ["Bdp", "Bdd", "Bnc", "Bdq"],
           ["Bpp", "Bdp", "Bdd", "Bpd"], ["Bdd", "Bpd", "Bfd", "Bfe"],
           ["Bpd", "Bdd", "Bqq", "Bpq"], ["Bdp", "Bpp", "Bqf", "Bcp"],
           ["Bpe", "Bpp", "Bfq", "Bcf"], ["Bgd", "Bbd", "Bcc", "Bdc"],
           ["Bpd", "Bpp", "Bfq", "Bqd"], ["Bpp", "Bfc", "Bdp", "Bfd"],
           ["Bpp", "Bqd", "Bfc", "Bch"], ["Bbc", "Bnq", "Bnp", "Bpp"],
           ["Bdp", "Bdd", "Bqq", "Bqp"], ["Bdc", "Bpd", "Bdf", "Bcn"],
           ["Bpd", "Bdd", "Bqn", "Bpj"], ["Beb", "Bec", "Bed", "Bee"],
           ["Bdd", "Bpd", "Bcq", "Bdq"], ["Bpp", "Bqd", "Boc", "Bhd"],
           ["Bpp", "Bqq", "Bqo", "Brp"], ["Bpd", "Bpp", "Bep", "Bcq"],
           ["Bcd", "Bfd", "Bdq", "Bco"], ["Bdd", "Bdp", "Bqc", "Bpc"],
           ["Bdp", "Bpp", "Bqf", "Bcc"], ["Bpd", "Bod", "Bqd", "Bqe"],
           ["Bpd", "Bpp", "Bcc", "Bdc"], ["Bpp", "Bdp", "Bcf", "Bqc"],
           ["Bpp", "Bqd", "Bfc", "Bod"], ["Bnp", "Bdc", "Beb", "Bcb"],
           ["Bdp", "Bpq", "Bpn", "Bcn"], ["Bdd", "Bdp", "Bnq", "Bcd"],
           ["Bpp", "Bdp", "Bic", "Bco"], ["Bdp", "Beq", "Bdo", "Bdq"],
           ["Bpp", "Bqc", "Bqd", "Bpe"], ["Bpd", "Bpp", "Bcc", "Bdc"],
           ["Bqd", "Bdc", "Bce", "Bpf"], ["Bej", "Bed", "Bcd", "Bce"],
           ["Bdd", "Bpd", "Bcn", "Bpc"], ["Bqd", "Bnc", "Bdp", "Bcc"],
           ["Bdp", "Beq", "Bfq", "Bdq"], ["Bpd", "Bdd", "Bcq", "Bcp"],
           ["Bqd", "Bpp", "Bnd", "Bqn"], ["Bdp", "Bpp", "Bqc", "Bqd"],
           ["Bqp", "Bdd", "Boc", "Bpe"], ["Bjj", "Bqf", "Bnc", "Bqc"],
           ["Bqd", "Bpq", "Boc", "Bpl"], ["Bpp", "Bnc", "Bdd", "Bqp"],
           ["Bdp", "Bpp", "Bqf", "Bcc"], ["Bdd", "Bdp", "Boq", "Bqc"],
           ["Bdd", "Bpd", "Bqn", "Bdc"], ["Bdq", "Bpp", "Bdo", "Boc"],
           ["Bpp", "Bdp", "Bqc", "Bqd"], ["Bpp", "Bpd", "Bdp", "Bdd"],
           ["Bdp", "Bdd", "Bnc", "Bdq"], ["Bpp", "Bcf", "Bpd", "Bdf"],
           ["Bdq", "Bpp", "Bco", "Bcp"], ["Bqn", "Bcp", "Bod", "Bep"],
           ["Bpq", "Bdd", "Boc", "Bco"], ["Bpd", "Bpp", "Bcc", "Bcd"],
           ["Bpd", "Bdc", "Beq", "Bdo"], ["Bpd", "Bod", "Bnd", "Bne"],
           ["Bpd", "Bpp", "Bfc", "Bqp"], ["Bcp", "Bpd", "Bqo", "Bec"],
           ["Bpp", "Bqd", "Bfc", "Bcf"], ["Brb", "Bcq", "Beq", "Bcr"],
           ["Bcp", "Bpp", "Boc", "Bfp"], ["Bpd", "Bdd", "Bqq", "Bpq"],
           ["Bpd", "Bpq", "Bqk", "Bpf"], ["Bcf", "Bdc", "Bpc", "Bod"],
           ["Bdp", "Bdd", "Bqe", "Bpe"], ["Bpp", "Bcq", "Bcp", "Bbn"],
           ["Bdp", "Bpp", "Bqc", "Bqd"], ["Bpd", "Boc", "Bqc", "Bpb"],
           ["Bdd", "Bpd", "Bqq", "Bpq"], ["Bqd", "Bnd", "Bpp", "Bqn"],
           ["Bpp", "Bcp", "Bcf", "Bem"], ["Bik", "Bqc", "Bqe", "Brc"],
           ["Bpp", "Bpd", "Bcq", "Bcp"], ["Bpp", "Bcp", "Bcf", "Bpq"],
           ["Brm", "Bqq", "Brp", "Bop"], ["Bdp", "Bdd", "Bnc", "Bqq"],
           ["Bpp", "Bdd", "Bch", "Boc"], ["Bmk", "Bpc", "Bqb", "Brc"],
           ["Bpd", "Bpp", "Bfq", "Bqd"], ["Bpd", "Bpp", "Bcj", "Bfq"],
           ["Bpp", "Bdd", "Bpd", "Bdp"], ["Bdc", "Bpd", "Bde", "Bnc"],
           ["Bqd", "Bed", "Bep", "Bop"], ["Bpd", "Bqp", "Bfq", "Bcn"],
           ["Bdp", "Bdd", "Bnc", "Bdq"], ["Bpp", "Bqq", "Boq", "Bpr"]]
# ------------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------


def goinit():
    global GODNO
    GODNO = 0  # 下子順序

    global BDBW, BDSN

    for x in range(0, 21):
        for y in range(0, 21):
            BDBW[x][y] = -1
            BDSN[x][y] = 0  # 棋子種類 下子順序

    for x in range(1, 20):
        for y in range(1, 20):
            BDBW[x][y] = 0

    global BDGN
    global BDCD
    for x in range(0, 21):
        for y in range(0, 21):
            BDGN[x][y] = 0
            BDCD[x][y] = 0
            BDCC[x][y] = 0

    global stringdata
    for y in range(0, 363):
        for x in range(0, 363):
            stringdata[y][x] = "0"

    global stringlife
    for y in range(0, 363):
        for x in range(0, 363):
            stringlife[y][x] = 0

    global stringlife0
    for x in range(0, 363):
        stringlife0[x] = 0

    global stringlifeXY
    for y in range(0, 363):
        # for x in range(0, 11):
        for x in range(0, 363):
            stringlifeXY[y][x] = "0"

    global BDcoordinate
    for i in range(0, 21):
        # for x in range(0, 11):
        for j in range(0, 21):
            BDcoordinate[i][j] = "0"

    global GOBW  # 棋子種類
    global GOX  # 棋盤點X座標(1-19)
    global GOY  # 棋盤點Y座標(1-19)
    global GOOUT
    global SRBW
    global SRNUM
    global SRDT
    for aaa in range(0, 363):
        GOBW[aaa] = 0  # 棋子種類
        GOX[aaa] = 0  # 棋盤點X座標(1-19)
        GOY[aaa] = 0  # 棋盤點Y座標(1-19)
        GOOUT[aaa] = 0
        SRBW[aaa] = 0
        SRNUM[aaa] = 0
        SRDT[0][aaa] = 0
        SRDT[1][aaa] = 0
        SRDT[2][aaa] = 0
        SRDT[3][aaa] = 0
        SRDT[4][aaa] = 0
        SRDT[5][aaa] = 0
        SRDT[6][aaa] = 0
        SRDT[7][aaa] = 0
        SRDT[8][aaa] = 0
        SRDT[9][aaa] = 0

    global BSS, BMM, WSS, WMM, XXX1, YYY1, XXX, YYY, KKK
    global NEWX, NEWY, MDX, MDY
    global WhiteStringNo  # 白子串子序號
    global BlackStringNo  # 黑子串子序號
    global STRINGNO  # 目前串子序號
    global BWIN  # public String BWIN="提子數: 000";
    global BWINTOTAL  # public String BWINTOTAL="佔地數: 000";
    global WWIN  # public String WWIN="提子數: 000";
    global WWINTOTAL  # public String WWINTOTAL="佔地數: 000";
    global PLAYTYPE
    global NUMONOFF
    global PlayModel
    PlayModel = ""
    BSS = 0
    BMM = 100
    WSS = 0
    WMM = 100
    XXX1 = 1
    YYY1 = 1
    XXX = 1
    YYY = 1
    KKK = 0
    NEWX = 0
    NEWY = 0
    MDX = 1
    MDY = 1
    WhiteStringNo = 2  # 白子串子序號
    BlackStringNo = 1  # 黑子串子序號
    STRINGNO = 1  # 目前串子序號
    BWIN = 0  # public String BWIN="提子數: 000";
    BWINTOTAL = 0  # public String BWINTOTAL="佔地數: 000";
    WWIN = 0  # public String WWIN="提子數: 000";
    WWINTOTAL = 0  # public String WWINTOTAL="佔地數: 000";
    PLAYTYPE = 1
    NUMONOFF = 0

    global WTime1, WTime2, WTime3, BTime1, BTime2, BTime3
    global TimeCount, TimeCheck

    TimeCheck = 0
    WTime1 = 0
    WTime2 = 0
    WTime3 = 0
    BTime1 = 0
    BTime2 = 0
    BTime3 = 0
    TimeCount = 0


# -----------------------------------------------------------------------------
def GBINITDIS(self):

    global PLAYTYPE, BDBW
    x = 0
    y = 0
    MFGGG = 0
    for x in range(1, 20):
        for y in range(1, 20):
            if(MFBI[x][y] == 1):
                MFGGG = int(random.randint(0, 100) + 1) % 2  # 建立亂數物件
                # MFGGG = (MFGNO.nextInt(100)+1)%2;
                if(MFGGG == 0):
                    BDBW[y][x] = 2
                if(MFGGG == 1):
                    BDBW[y][x] = 1

    PLAYTYPE = 0
    # self.update()


# -----------------------------------------------------------------------------
def BWTimeChange(self):

    global BTime, BTimenew, BTime_1, BTime_2, BTime1, BTime2, BTime3
    global WTime, WTimenew, WTime_1, WTime_2, WTime1, WTime2, WTime3
    global TimeCount, GODNO, TimeCheck

    if(TimeCheck == 0):
        if(GODNO % 2 == 1):
            BTime = time.strftime("%H:%M:%S", time.localtime())
            BTime_1 = time.time()
        if(GODNO % 2 == 0):
            WTime = time.strftime("%H:%M:%S", time.localtime())
            WTime_1 = time.time()

    if(TimeCheck == 1):
        if(GODNO % 2 == 1):
            # BTimenew = time.strftime("%H:%M:%S", time.localtime())
            BTime_2 = time.time()
            BTimenew = BTime_2 - BTime_1
        if(GODNO % 2 == 0):
            # WTimenew = time.strftime("%H:%M:%S", time.localtime())
            WTime_2 = time.time()
            WTimenew = WTime_2 - WTime_1

# -----------------------------------------------------------------------------


def ScreenWindow(self):
    print('ScreenWindow')
    global SCREENWINDOW
    SCREENWINDOW += 1
    if(SCREENWINDOW > 1):
        SCREENWINDOW = 0
    if(SCREENWINDOW == 0):
        self.setGeometry(0, 30, 1450, 1029)
    if(SCREENWINDOW == 1):
        self.setGeometry(450, 30,  1450, 1029)

    self.update()

# -----------------------------------------------------------------------------


def GODATA(self):
    print('GODATA(self):')
    global FrameTitle
    global timestr
    global timestring
    timestr = datetime.datetime.now()
    # timestring = time.strftime("%Y-%m-%d %H:%M:%S",time.localtime())
    timestring = time.strftime("%Y%m%d%H%M%S", time.localtime())
    FrameTitle = self.title + ' - ' + \
        'Black[ Computer ] VS White[ People ]' + ' _ ' + \
        str(timestr) + ' - ' + str(timestring) + '_' + str(GOPLAYFILENO)
    self.setWindowTitle(FrameTitle)
    # self.setWindowTitle(self.title + ' - ' + 'Computer[000.000.000.000:0000] VS People[000.000.000.000:0000]' + str(timestr))
    # self.setWindowTitle(self.title + '  Black(player) ' + '  White(player)  ')
    self.update()

# BTime = time.strftime("%H:%M:%S", time.localtime())

# -----------------------------------------------------------------------------


def GoPlayDataTextSave():

    global textBW, textXY
    x = 0
    GoPlayDataText = ""

    try:
        GoPlayDataText = ""
        # //GN[有意義的識別名稱.通常將相同GN的棋譜放一起] 吳清源全集
        # GoPlayDataText = "(;GN["+"GreenGO_V1_TestData"
        # +"]DT["+GoStartTime  # DT[對奕時間] 1962年
        # +"]PC["+"TestPosition"  # PC[對奕地點] 北京
        # +"]PB["+"Computer"  # PB[持黑棋者] 吳清源
        # +"]PW["+"Player"  # PW[持白棋者] 汪雲峰
        # +"]HA["+"PassNumber"  # HA[讓子數] 吳受先
        # +"]RE["+"Result"  # RE[記錄最後對奕的結果] 共121手 黑中盤勝
        # +"]US["+"GOjv.java"  # US[記錄輸入棋譜的人或程式] 餘軍
        # +"]SO["+"GreenGO"+"]"  # SO[記錄此對奕資訊的來源] 飛揚圍棋網
        # +"AB"+"[pd]" //AB[pd][dp]增加黑子至盤面上(讓子)
        # +"AW"+"[dd]" //AW[dd][pp]增加白子至盤面上(讓子)
        # +"AB"+"[NO]"  # AB[pd][dp]增加黑子至盤面上(讓子)
        # +"AW"+"[NO]"  # AW[dd][pp]增加白子至盤面上(讓子)
        # +";"

        f = open("d:/99999/"+GPDtxtName+"_" + str(GOPLAYFILENO)+".txt", 'a')
        GoPlayDataText = "(;GN["+"GreenGO_V1_TestData"+"]DT["+GoStartTime+"]PC["+"TestPosition"+"]PB["+"Computer"+"]PW[" + \
            "Player"+"]HA["+"PassNumber"+"]RE["+"Result"+"]US[" + \
            "GOpython.py" + "]SO["+"GreenGO"+"]"+"AB"+"[NO]"+"AW"+"[NO]"+";"
        f.write(GoPlayDataText)
        f.write("\n")

        for x in range(1, 362):
            GoPlayDataText = ""
            GoPlayDataText = ";"+textBW[GOBW[x]]+"["+textXY[GOX[x]]+textXY[GOY[x]]+"]"+str(
                x)+"_"+str(GOBW[x])+","+str(GOX[x])+","+str(GOY[x])+","+str(GOOUT[x])
            f.write(GoPlayDataText)
            f.write("\n")

        f.close()

    except Exception as e:
        print('Error:', e)

# -----------------------------------------------------------------------------


def TEXTDIS(self, text):

    global SD
    global StringDim

    StringDim = text

    SD[32] = SD[31]
    SD[31] = SD[30]
    SD[30] = SD[29]
    SD[29] = SD[28]
    SD[28] = SD[27]
    SD[27] = SD[26]
    SD[26] = SD[25]
    SD[25] = SD[24]
    SD[24] = SD[23]
    SD[23] = SD[22]
    SD[22] = SD[21]
    SD[21] = SD[20]
    SD[20] = SD[19]
    SD[19] = SD[18]
    SD[18] = SD[17]
    SD[17] = SD[16]
    SD[16] = SD[15]
    SD[15] = SD[14]
    SD[14] = SD[13]
    SD[13] = SD[12]
    SD[12] = SD[11]
    SD[11] = SD[10]
    SD[10] = SD[9]
    SD[9] = SD[8]
    SD[8] = SD[7]
    SD[7] = SD[6]
    SD[6] = SD[5]
    SD[5] = SD[4]
    SD[4] = SD[3]
    SD[3] = SD[2]
    SD[2] = SD[1]
    SD[1] = SD[0]
    SD[0] = StringDim

    self.update()


# -----------------------------------------------------------------------------
def GOorderdown(self):

    global PLAYTYPE
    PLAYTYPE = 1

    GOengine(self)


# -----------------------------------------------------------------------------

def computerdown(self):

    global PLAYTYPE
    PLAYTYPE = 1

    GOengine(self)


# -----------------------------------------------------------------------------


def GOengine(self):

    global GODNO, IsGoDown, GoDowned, GoSelected, TimeCount, TimeCheck, SRDT

    if(GODNO < 361):
        IsGoDown = 0
        GoDowned = 0
        GoSelected = 0

        GODNO += 1

        TimeCheck = 0
        BWTimeChange(self)

        GODownPositionSelect()  # 黑白子輪流順序下子

        if(GoSelected == 1):
            GODOWN()  # Record go down data
            if(GoDowned == 1):

                GoCheckCancel()  # ClearGoed=1;
                LinkString()  # 連結串子

                # for(z=1;z<=GODNO;z++){if(SRDT[0][z]==0){GoCancel(z);}}
                for z in range(1, GODNO + 1):
                    if(SRDT[0][z] == 0):
                        print('z= '+str(z))
                        GoCancel(z)

                TimeCount += 1
                TimeCheck = 1
                BWTimeChange(self)

                GBDIS(self)
                print('GODNO=' + str(GODNO))

                TEXTDIS(self, str(GODNO)+' ' +
                        str(xtext[GODX])+','+str(ytext[GODY]))

# -----------------------------------------------------------------------------


def GBDIS(self):
    print('GBDIS(self):')

    self.update()


# -----------------------------------------------------------------------------
def GoCancel(GN):
    print("GoCancel( " + str(GN) + " ):")
    try:
        assert type(GN) == int
    except:
        print("GoCancel參數必須是int")

    global GODNO, BDSN, GOOUT, BDBW, BDGN, SRBW, SRDT, BWIN, WWIN
    #print("GN = " + str(GN))
    # round(GN, 0)  # *********
    # CGSN = int(GN)
    CGSN = int(round(GN, 0))
    #print("CGSN = " + str(CGSN))

    for x in range(1, 20):
        for y in range(1, 20):
            if(BDSN[x][y] == CGSN):
                if(BDBW[x][y] == 1):
                    BWIN += 1
                if(BDBW[x][y] == 2):
                    WWIN += 1

                # 更改相關串子棋子資料
                GOOUT[BDGN[x][y]] = GODNO  # 該棋子在第GoOrder手被提子
                BDBW[x][y] = 0  # 棋盤棋種歸0
                BDGN[x][y] = 0  # 棋盤下子順序歸0

    SRBW[CGSN] = -1  # 設定該串子為已被提子
    SRBW[CGSN] = 0
    SRDT[0][CGSN] = -1
    SRDT[1][CGSN] = 0
    SRDT[2][CGSN] = 0
    SRDT[3][CGSN] = 0
    SRDT[4][CGSN] = 0


# -----------------------------------------------------------------------------
def GoCheckCancel():

    global BDBW, BDSN, MDX, MDY

    DSX = 0
    DSY = 0
    GLNum = 0
    CGDSN = 0

    # 映射BDBW[,]資料至BDCD[,]
    # 上
    DSX = MDX
    DSY = MDY - 1
    GLNum = 0
    CGDSN = BDSN[DSX][DSY]
    GLNum = GoLifeNumCount(DSX, DSY)
    if(GLNum == 0 and BDBW[MDX][MDY] != BDBW[DSX][DSY]):
        GoCancel(CGDSN)
        # 右
    DSX = MDX + 1
    DSY = MDY
    GLNum = 0
    CGDSN = BDSN[DSX][DSY]
    GLNum = GoLifeNumCount(DSX, DSY)
    if(GLNum == 0 and BDBW[MDX][MDY] != BDBW[DSX][DSY]):
        GoCancel(CGDSN)
        # 下
    DSX = MDX
    DSY = MDY + 1
    GLNum = 0
    CGDSN = BDSN[DSX][DSY]
    GLNum = GoLifeNumCount(DSX, DSY)
    if(GLNum == 0 and BDBW[MDX][MDY] != BDBW[DSX][DSY]):
        GoCancel(CGDSN)
        # 左
    DSX = MDX - 1
    DSY = MDY
    GLNum = 0
    CGDSN = BDSN[DSX][DSY]
    GLNum = GoLifeNumCount(DSX, DSY)
    if(GLNum == 0 and BDBW[MDX][MDY] != BDBW[DSX][DSY]):
        GoCancel(CGDSN)


# -----------------------------------------------------------------------------
def GoLifeNumCount(GSX, GSY):  # 氣數統計 清除棋子
    try:
        assert type(GSX) == int
    except:
        print("GoLifeNumCount第一個參數必須是int")
    try:
        assert type(GSY) == int
    except:
        print("GoLifeNumCount第二個參數必須是int")

    global BDBW, BDSN, BDCD

    x = 0
    y = 0
    GLN = 0

    GDSX = int(GSX)
    GDSY = int(GSY)

    for x in range(0, 21):
        for y in range(0, 21):
            BDCD[x][y] = 0

    for x in range(1, 19):
        for y in range(1, 19):
            if(BDSN[x][y] == BDSN[GDSX][GDSY]):
                if(BDBW[x-1][y] == 0):
                    BDCD[x-1][y] = 1  # 左
                if(BDBW[x][y-1] == 0):
                    BDCD[x][y-1] = 1  # 上
                if(BDBW[x+1][y] == 0):
                    BDCD[x+1][y] = 1  # 右
                if(BDBW[x][y+1] == 0):
                    BDCD[x][y+1] = 1  # 下

                # 統計氣數
    for x in range(1, 19):
        for y in range(1, 19):
            if(BDCD[x][y] == 1):
                GLN += 1

    return GLN


# -----------------------------------------------------------------------------
def LinkString():  # 連結串子

    global STRINGNO, BDBW, BDSN, MDX, MDY

    x = 0
    y = 0
    linked = 0
    BDSNDT = np.array([0, 0, 0, 0, 0], dtype=np.int_)

    for x in range(0, 5):
        BDSNDT[x] = 0

    BDSNDT[0] = STRINGNO
    BDSN[MDX][MDY] = BDSNDT[0]
    if(BDBW[MDX-1][MDY] == BDBW[MDX][MDY]):
        BDSNDT[1] = BDSN[MDX-1][MDY]  # Lift
    if(BDBW[MDX][MDY-1] == BDBW[MDX][MDY]):
        BDSNDT[2] = BDSN[MDX][MDY-1]  # Top
    if(BDBW[MDX+1][MDY] == BDBW[MDX][MDY]):
        BDSNDT[3] = BDSN[MDX+1][MDY]  # Right
    if(BDBW[MDX][MDY+1] == BDBW[MDX][MDY]):
        BDSNDT[4] = BDSN[MDX][MDY+1]  # Buttom
    BDSN[MDX][MDY] = BDSNDT[0]
    linked = 10

    if(BDBW[MDX-1][MDY] == BDBW[MDX][MDY]):  # Left
        for y in range(1, 20):
            for x in range(1, 20):
                if(BDSN[x][y] == BDSNDT[1]):
                    BDSN[x][y] = BDSN[MDX][MDY]  # BDSN[x][y] = BDSN[MDX][MDY]
        linked = 11
    if(BDBW[MDX][MDY-1] == BDBW[MDX][MDY]):  # Top
        for y in range(1, 20):
            for x in range(1, 20):
                if(BDSN[x][y] == BDSNDT[2]):
                    BDSN[x][y] = BDSNDT[0]
        linked = 12
    if(BDBW[MDX+1][MDY] == BDBW[MDX][MDY]):  # Right
        for y in range(1, 20):
            for x in range(1, 20):
                if(BDSN[x][y] == BDSNDT[3]):
                    BDSN[x][y] = BDSNDT[0]
        linked = 13
    if(BDBW[MDX][MDY+1] == BDBW[MDX][MDY]):  # Buttom
        for y in range(1, 20):
            for x in range(1, 20):
                if(BDSN[x][y] == BDSNDT[4]):
                    BDSN[x][y] = BDSNDT[0]
        linked = 14

    STRINGNO += 1


# -----------------------------------------------------------------------------


def GODownPositionSelect():

    global GODNO, PLAYTYPE, SRDT, SRBW, SRNUM, GOYESNO
    global stringdata, stringlife, stringdata0, stringlife0, stringlifeXY

    x = 0
    y = 0
    z = 0
    ADX = 0
    ADY = 0
    ListTotal = 0
    ListPOS = 0
    Zran = 0

    CalculationBoard()  # 計算氣數及盤面資料Calculate life count and disk data

# -----------------------------------------------------------------------------
    GObasicran = 0
    GObasicran = random.randint(0, 250)
    tx = 0
    ty = 0
    GBR = ""
    GBRstrx = 0
    GBRstry = 0
# --------------------------------------------------------------
    if (GoSelected == 0 and PLAYTYPE == 1):
        if(GODNO < 8):
            if(GODNO == 1):
                GBR = GObasic[GObasicran][0]
                for ax in range(1, 20):
                    if(GBR[1] == textXY[ax]):
                        GBRstrx = ax
                for ax in range(1, 20):
                    if(GBR[2] == textXY[ax]):
                        GBRstry = ax
                if(GBRstrx > 0 and GBRstry > 0 and GBRstrx < 20 and GBRstry < 20):
                    if(BDBW[GBRstrx][GBRstry] == 0):  # 棋子種類
                        print("GODNO 1 是陣列表 "+str(GBRstrx) +
                              " , " + str(GBRstry))
                        GODOWNYESNO(GBRstrx, GBRstry)  # 檢查下子位置是否合格
                    else:
                        tx = random.randint(1, 19)
                        ty = random.randint(1, 19)
                        x = int(tx)
                        y = int(ty)
                        if(x > 0 and y > 0 and x < 20 and y < 20):
                            if(BDBW[x][y] == 0):  # 棋子種類
                                print("GODNO 1 是亂數")
                                GODOWNYESNO(x, y)  # 檢查下子位置是否合格
            elif(GODNO == 3):
                GBR = GObasic[GObasicran][1]
                for ax in range(1, 20):
                    if(GBR[1] == textXY[ax]):
                        GBRstrx = ax
                for ax in range(1, 20):
                    if(GBR[2] == textXY[ax]):
                        GBRstry = ax
                if(GBRstrx > 0 and GBRstry > 0 and GBRstrx < 20 and GBRstry < 20):
                    if(BDBW[GBRstrx][GBRstry] == 0):  # 棋子種類
                        print("GODNO 3 是陣列表 "+str(GBRstrx) +
                              " , " + str(GBRstry))
                        GODOWNYESNO(GBRstrx, GBRstry)  # 檢查下子位置是否合格
                    else:
                        tx = random.randint(1, 19)
                        ty = random.randint(1, 19)
                        x = int(tx)
                        y = int(ty)
                        if(x > 0 and y > 0 and x < 20 and y < 20):
                            if(BDBW[x][y] == 0):  # 棋子種類
                                print("GODNO 3 是亂數")
                                GODOWNYESNO(x, y)  # 檢查下子位置是否合格
            elif(GODNO == 5):
                GBR = GObasic[GObasicran][2]
                for ax in range(1, 20):
                    if(GBR[1] == textXY[ax]):
                        GBRstrx = ax
                for ax in range(1, 20):
                    if(GBR[2] == textXY[ax]):
                        GBRstry = ax
                if(GBRstrx > 0 and GBRstry > 0 and GBRstrx < 20 and GBRstry < 20):
                    if(BDBW[GBRstrx][GBRstry] == 0):  # 棋子種類
                        print("GODNO 5 是陣列表 "+str(GBRstrx) +
                              " , " + str(GBRstry))
                        GODOWNYESNO(GBRstrx, GBRstry)  # 檢查下子位置是否合格
                    else:
                        tx = random.randint(1, 19)
                        ty = random.randint(1, 19)
                        x = int(tx)
                        y = int(ty)
                        if(x > 0 and y > 0 and x < 20 and y < 20):
                            if(BDBW[x][y] == 0):  # 棋子種類
                                print("GODNO 5 是亂數")
                                GODOWNYESNO(x, y)  # 檢查下子位置是否合格
            elif(GODNO == 7):
                GBR = GObasic[GObasicran][3]
                for ax in range(1, 20):
                    if(GBR[1] == textXY[ax]):
                        GBRstrx = ax
                for ax in range(1, 20):
                    if(GBR[2] == textXY[ax]):
                        GBRstry = ax
                if(GBRstrx > 0 and GBRstry > 0 and GBRstrx < 20 and GBRstry < 20):
                    if(BDBW[GBRstrx][GBRstry] == 0):  # 棋子種類
                        print("GODNO 7 是陣列表 "+str(GBRstrx) +
                              " , " + str(GBRstry))
                        GODOWNYESNO(GBRstrx, GBRstry)  # 檢查下子位置是否合格
                    else:
                        tx = random.randint(1, 19)
                        ty = random.randint(1, 19)
                        x = int(tx)
                        y = int(ty)
                        if(x > 0 and y > 0 and x < 20 and y < 20):
                            if(BDBW[x][y] == 0):  # 棋子種類
                                print("GODNO 7 是亂數")
                                GODOWNYESNO(x, y)  # 檢查下子位置是否合格
            else:
                TESTGGGx = random.randint(1, 19)
                TESTGGGy = random.randint(1, 19)
                x = int(TESTGGGx)
                y = int(TESTGGGy)
                if(x > 0 and y > 0 and x < 20 and y < 20):
                    if(BDBW[x][y] == 0):  # 棋子種類
                        GODOWNYESNO(x, y)  # 檢查下子位置是否合格
                        print("GODNO < 8 是亂數")
# --------------------------------------------------------------
    if (GoSelected == 0 and PLAYTYPE == 1):  # 提取對方只剩1氣的串子
        if(GODNO > 7):
            for z in range(1, STRINGNO + 1):  # 棋局下至目前為止的棋串數,判斷是否為對方棋串
                # 假如是對方,而且氣數資料陣列第0行只有1氣 列行yx
                # if((z % 2) != (GODNO % 2) and stringlife[z][0] == 1):
                if((z % 2) != (GODNO % 2) and stringlife0[z] == 1):  # 判斷是否是對方棋
                    # 檢查下子位置是否為空位  行列xy x*21+y
                    GBR = ""
                    GBRstrx = 0
                    GBRstry = 0  # 先歸0
                    GBR = stringlifeXY[z][1]
                    print("--------- 1 GBR = " + GBR)
                    for ax in range(1, 20):
                        if(GBR[0] == textXY[ax]):
                            GBRstrx = ax
                    for ax in range(1, 20):
                        if(GBR[1] == textXY[ax]):
                            GBRstry = ax
                    if(BDBW[GBRstrx][GBRstry] == 0):
                        GODOWNYESNO(GBRstrx, GBRstry)  # 檢查下子位置是否合格,是否可下子
# --------------------------------------------------------------
    if (GoSelected == 0 and PLAYTYPE == 1):
        if(GODNO > 7):
            # while(GoSelected == 0):

            SRran = int(random.randint(1, STRINGNO))

            # 棋局下至目前為止的棋串數,判斷是否為對方棋串
            # 假如是對方,而且氣數資料陣列不只1氣, 列行yx
            if((SRran % 2) != (GODNO % 2) and stringlife0[SRran] > 1):
                # 判斷是否是對方棋
                # 檢查下子位置是否為空位  列行yx x+y*21
                Zran = int(random.randint(2, stringlife0[SRran]))
                aa = Zran
                if(aa > stringlife0[SRran]):
                    aa = stringlife0[SRran]
                GBR = ""
                GBRstrx = 0
                GBRstry = 0  # 先歸0
                GBR = stringlifeXY[SRran][aa]
                print("--------- 2 GBR = " + GBR)
                for ax in range(1, 20):
                    if(GBR[0] == textXY[ax]):
                        GBRstrx = ax
                for ax in range(1, 20):
                    if(GBR[1] == textXY[ax]):
                        GBRstry = ax
                if(BDBW[GBRstrx][GBRstry] == 0):
                    GODOWNYESNO(GBRstrx, GBRstry)  # 檢查下子位置是否合格,是否可下子

# --------------------------------------------------------------
    if(GoSelected == 0 and PLAYTYPE == 1):  # //最後方式
        while(GoSelected == 0):
            for x in range(0, 363):
                #stringlifeXY[0][x] = "0"
                SRLdata[x] = "00"
            ListTotal = 0
            for y in range(1, 20):
                for x in range(1, 20):
                    if(BDBW[x][y] == 0):
                        ListTotal += 1
                        SRLdata[ListTotal] = textXY[x] + textXY[y]
            SRtext = "00"  # 先給予初值 00
            ListPOS = int(random.randint(0, ListTotal) + 1)
            SRtext = SRLdata[ListPOS]
            print("--------- SRtext = " + SRtext)
            for ax in range(1, 20):
                if(SRtext[0] == textXY[ax]):
                    ADX = ax
            for ay in range(1, 20):
                if(SRtext[1] == textXY[ay]):
                    ADY = ay
            if(BDBW[ADX][ADY] == 0):
                GODOWNYESNO(ADX, ADY)  # 檢查下子位置是否合格

# -----------------------------------------------------------------------------


def GODOWNYESNO(mx, my):
    try:
        assert type(mx) == int
    except:
        print("GODOWNYESNO第一個參數必須是int")
    try:
        assert type(my) == int
    except:
        print("GODOWNYESNO第二個參數必須是int")

    global GOYESNO, MDX, MDY, GoSelected

    MDXXX = int(mx)
    MDYYY = int(my)
    LFN = 0
    GOYESNO = 0
    LFN = StringLinkCheck(int(MDXXX), int(MDYYY))
    if(LFN > 0):
        GOYESNO = 1
    if(GOYESNO == 1):
        MDX = int(MDXXX)
        MDY = int(MDYYY)
        GoSelected = 1
    print('LFN= ', str(LFN))
    print('MDX= ' + str(MDX) + '  ' + 'MDY= ' + str(MDY))

# -----------------------------------------------------------------------------


def dij_pft_B(dx, dy):  # 佔地影響力+位置因素表=勢力分佈
    print('dij_pft_B(dx,dy):')
    try:
        assert type(dx) == int
    except:
        print("dij_pft_B第一個參數必須是int")
    try:
        assert type(dy) == int
    except:
        print("dij_pft_B第二個參數必須是int")

    # if n == 1:
    #    return 1
    # else:
    #    return (n * dij_pft(n - 1))
    for x in range(1, 7):
        for y in range(1, 7):
            if(dx-x > 0 and dy-y > 0):
                potential[dx][dy] = DIJ[x][y] + PFT[dx][dy]


# -----------------------------------------------------------------------------


def dij_pft_W(dx, dy):  # 佔地影響力+位置因素表=勢力分佈
    print('dij_pft_W(dx,dy):')
    try:
        assert type(dx) == int
    except:
        print("dij_pft_W第一個參數必須是int")
    try:
        assert type(dy) == int
    except:
        print("dij_pft_W第二個參數必須是int")

    for x in range(1, 7):
        for y in range(1, 7):
            if(dx-x > 0 and dy-y > 0):
                potential[dx][dy] = DIJ[x][y] + PFT[dx][dy]


# -----------------------------------------------------------------------------


def StringLinkCheck(GDX, GDY):
    try:
        assert type(GDX) == int
    except:
        print("StringLinkCheck第一個參數必須是int")
    try:
        assert type(GDY) == int
    except:
        print("StringLinkCheck第二個參數必須是int")

    global GODNO, BDSLC, BDCD, BDBW, BDSN

    x = 0
    y = 0
    SLCC = 0
    SLCL = 0
    SLCT = 0
    SLCR = 0
    SLCB = 0
    SLCBW = 0

    GMDX = int(GDX)
    GMDY = int(GDY)
    print('GMDX= '+str(GMDX)+'  '+'GMDY= '+str(GMDY))

    for x in range(0, 21):
        for y in range(0, 21):
            BDSLC[x][y] = -1

    for x in range(1, 20):
        for y in range(1, 20):
            BDSLC[x][y] = 0

    for x in range(0, 21):
        for y in range(0, 21):
            BDCD[x][y] = 0

    if(GODNO % 2 == 0):
        SLCBW = 2
    if(GODNO % 2 == 1):
        SLCBW = 1

    BDSLC[GMDX][GMDY] = GODNO + 1000
    SLCC = GODNO + 1000

    if(BDBW[GMDX-1][GMDY] == BDBW[GMDX][GMDY]):
        SLCL = BDSN[GMDX-1][GMDY]  # Lift
    if(BDBW[GMDX][GMDY-1] == BDBW[GMDX][GMDY]):
        SLCT = BDSN[GMDX][GMDY-1]  # Top
    if(BDBW[GMDX+1][GMDY] == BDBW[GMDX][GMDY]):
        SLCR = BDSN[GMDX+1][GMDY]  # Right
    if(BDBW[GMDX][GMDY+1] == BDBW[GMDX][GMDY]):
        SLCB = BDSN[GMDX][GMDY+1]  # Buttom

    if(BDBW[GMDX-1][GMDY] == SLCBW):  # Left
        for x in range(1, 20):
            for y in range(1, 20):
                if(BDSN[x][y] == BDSN[GMDX-1][GMDY]):
                    BDSLC[x][y] = SLCC

    if(BDBW[GMDX][GMDY-1] == SLCBW):  # Top
        for x in range(1, 20):
            for y in range(1, 20):
                if(BDSN[x][y] == BDSN[GMDX][GMDY-1]):
                    BDSLC[x][y] = SLCC

    if(BDBW[GMDX+1][GMDY] == SLCBW):  # Right
        for x in range(1, 20):
            for y in range(1, 20):
                if(BDSN[x][y] == BDSN[GMDX+1][GMDY]):
                    BDSLC[x][y] = SLCC

    if(BDBW[GMDX][GMDY+1] == SLCBW):  # Buttom
        for x in range(1, 20):
            for y in range(1, 20):
                if(BDSN[x][y] == BDSN[GMDX][GMDY+1]):
                    BDSLC[x][y] = SLCC

    SLN = 0
    for x in range(1, 20):
        for y in range(1, 20):
            if(BDSLC[x][y] > 0):
                if(BDBW[x-1][y] == 0):  # 位置是空的
                    BDCD[x-1][y] = 1  # 左
                if(BDBW[x][y-1] == 0):
                    BDCD[x][y-1] = 1  # 上
                if(BDBW[x+1][y] == 0):
                    BDCD[x+1][y] = 1  # 右
                if(BDBW[x][y+1] == 0):
                    BDCD[x][y+1] = 1  # 下
                # 統計氣數
    for x in range(1, 20):
        for y in range(1, 20):
            if(BDCD[x][y] == 1):
                SLN += 1

    print('SLN= ' + str(SLN))
    return SLN

# -----------------------------------------------------------------------------


def CalculationBoard():

    global SRBW, SRNUM, SRDT, BDSN, BDCC, BDCD, BDBW, stringdata, stringlife
    global BDcoordinate, BDcoordinateXY, stringdata0, stringlife0, stringlifeXY

    x = 0
    y = 0
    z = 0

    for y in range(0, 363):
        SRBW[y] = 0
        SRNUM[y] = 0

    for y in range(0, 363):
        SRDT[0][y] = -1
        SRDT[1][y] = 0
        SRDT[2][y] = 0
        SRDT[3][y] = 0
        SRDT[4][y] = 0
        SRDT[5][y] = 0
        SRDT[6][y] = 0
        SRDT[7][y] = 0
        SRDT[8][y] = 0
        SRDT[9][y] = 0

# 檢查串號如果存在.先將氣數歸0
    for x in range(1, 20):
        for y in range(1, 20):
            if(BDSN[x][y] > 0):
                SRDT[0][BDSN[x][y]] = 0


# 統計棋串資料
# --------------------------------------------
# 統計棋串所屬棋子
    for y in range(0, 363):  # 先y後x 先列後行
        for x in range(0, 363):
            stringdata[y][x] = "0"  # 棋串資料歸0
    for x in range(0, 363):
        stringdata0[x] = 0  # 棋串資料歸0

    LCNx = 0
    LCNy = 0
    SDx = "0"
    SDy = "0"
    for x in range(1, 20):
        for y in range(1, 20):
            if(BDSN[x][y] != 0):
                LCNy = BDSN[x][y]
                stringdata0[LCNy] += 1  # 棋串陣列資料記錄
                if(stringdata0[LCNy] > 361):
                    stringdata0[LCNy] = 361
                LCNx = stringdata0[LCNy]
                for a in range(1, 20):
                    if(x == a):
                        SDx = BDcoordinateXY[a]
                for b in range(1, 20):
                    if(y == b):
                        SDy = BDcoordinateXY[b]
                stringdata[LCNy][LCNx] = SDx + SDy  # 棋串位置 SPNO[z]
                # stringdata[LCNy][LCNx] = x + y*21  # 棋串位置 SPNO[z]

# 統計棋串所屬氣的位置
    for y in range(0, 363):  # 先y後x 先列後行
        for x in range(0, 363):
            stringlifeXY[y][x] = "0"  # 棋串資料歸0
    for x in range(0, 363):
        stringlife0[x] = 0  # 棋串資料歸0

    SLXY = 0
    SLx = "0"
    SLy = "0"
    # for z in range(1, GODNO + 1):
    for z in range(1, STRINGNO + 1):  # 計算棋串氣數
        # if (SRDT[0][z] == 0):
        if (stringlife0[z] == 0):  # 確認氣數歸0.表示該串子存在且尚未經過計算搜索
            for x in range(0, 21):
                for y in range(0, 21):
                    BDCC[x][y] = 0
                    BDCD[x][y] = 0
            for x in range(1, 20):
                for y in range(1, 20):
                    BDcoordinate[x][y] = "0"
#		映射BDBW[,]資料至BDCD[,] 計算資料至 BDcoordinate BDcoordinateXY
            for x in range(1, 20):
                for y in range(1, 20):
                    if(BDSN[x][y] == z):
                        if(BDBW[x-1][y] == 0):
                            BDCD[x-1][y] = 1  # 左
                            # BDCC[x-1][y] = (x - 1) + y*21
                            BDCC[x-1][y] = (x - 1) + y*15
                            for a in range(1, 20):
                                if(a == (x-1)):
                                    SLx = BDcoordinateXY[a]
                            for b in range(1, 20):
                                if(b == y):
                                    SLy = BDcoordinateXY[b]
                            BDcoordinate[x-1][y] = SLx + SLy
                        if(BDBW[x][y-1] == 0):
                            BDCD[x][y-1] = 1  # 上
                            BDCC[x][y-1] = x + (y - 1)*15
                            for a in range(1, 20):
                                if(a == x):
                                    SLx = BDcoordinateXY[a]
                            for b in range(1, 20):
                                if(b == (y-1)):
                                    SLy = BDcoordinateXY[b]
                            BDcoordinate[x][y-1] = SLx + SLy
                        if(BDBW[x+1][y] == 0):
                            BDCD[x+1][y] = 1  # 右
                            BDCC[x+1][y] = (x + 1) + y*15
                            for a in range(1, 20):
                                if(a == (x+1)):
                                    SLx = BDcoordinateXY[a]
                            for b in range(1, 20):
                                if(b == y):
                                    SLy = BDcoordinateXY[b]
                            BDcoordinate[x+1][y] = SLx + SLy
                        if(BDBW[x][y+1] == 0):
                            BDCD[x][y+1] = 1  # 下
                            BDCC[x][y+1] = x + (y+1)*15
                            for a in range(1, 20):
                                if(a == x):
                                    SLx = BDcoordinateXY[a]
                            for b in range(1, 20):
                                if(b == (y+1)):
                                    SLy = BDcoordinateXY[b]
                            BDcoordinate[x][y+1] = SLx + SLy

                        SRBW[z] = BDBW[x][y]  # 計錄該串子顏色
                        SRNUM[z] += 1  # 計錄該串子所屬棋子數量
#		統計氣數
            for x in range(1, 20):
                for y in range(1, 20):
                    if(BDCD[x][y] == 1):
                        SRDT[0][z] += 1  # 計錄該串子氣數
                        # 假如該串子氣數<10氣.繼續追加登錄該串子氣數
                        if(SRDT[0][z] < 10):
                            SRDT[SRDT[0][z]][z] = x + y*21

            for x in range(1, 20):
                for y in range(1, 20):
                    if(BDCD[x][y] == 1):
                        # if(BDCC[x][y] != 0):
                        stringlife0[z] += 1
                        SLXY = stringlife0[z]
                        if(SLXY > 361):
                            SLXY = 361
                        stringlifeXY[z][SLXY] = BDcoordinate[x][y]  # 統計氣位置

# ----------------------------------------------------------------------------


def GODOWN():

    global GODNO, BDBW, GOBW, MDX, MDY, GOX, GOY
    global GODX, GODY, GoDowned

    if(GODNO % 2 == 1):
        BDBW[int(MDX)][int(MDY)] = 1
        GOBW[GODNO] = 1
    if(GODNO % 2 == 0):
        BDBW[int(MDX)][int(MDY)] = 2
        GOBW[GODNO] = 2
    BDGN[int(MDX)][int(MDY)] = GODNO
    GOX[GODNO] = int(MDX)
    GOY[GODNO] = int(MDY)  # 棋盤點X座標(1-19)棋盤點Y座標(1-19)
    GODX = int(MDX)
    GODY = int(MDY)  # 棋盤點X座標(1-19)棋盤點Y座標(1-19)

    GoDowned = 1


# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
def goinittest(self):

    print("goinittest():")

    goinit()

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------


class Example(QWidget):
    def __init__(self):
        # def __init__(self, parent=None):
        super().__init__()
        self.title = 'GreenGO'
        # self.window_icon = QIcon("goicon.GIF")
        self.window_icon = QIcon("data/GOicon3232.ico")
        # self.setCursor(Qt.CrossCursor)

        self.setGeometry(0, 0, 1450, 1029)
        # self.setGeometry(self.left, self.top, self.width, self.height)

        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setWindowIcon(self.window_icon)
        self.setWindowFlags(Qt.WindowMinimizeButtonHint)  # 禁止最大化按鈕
        self.setWindowFlags(Qt.WindowMaximizeButtonHint)  # 禁止最大化按鈕
        self.setFixedSize(1450, 1029)

        Blabel = QLabel(self)
        Blabel.setText("")
        pxp = QPixmap('data/GOB5151png.png')
        Blabel.setPixmap(pxp)
        Blabel.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        Blabel.move(1100, 10)

        Wlabel = QLabel(self)
        Wlabel.setText("")
        pxp = QPixmap('data/GOW5151png.png')
        Wlabel.setPixmap(pxp)
        Wlabel.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        Wlabel.move(1100, 100)

        LBcaptureB = QLabel(self)
        LBcaptureB.setText("")
        pxp = QPixmap('data/LBcaptureB2525pngG.png')
        LBcaptureB.setPixmap(pxp)
        LBcaptureB.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        LBcaptureB.move(1290, 20)

        LBoccupiedB = QLabel(self)
        LBoccupiedB.setText("")
        pxp = QPixmap('data/LBoccupied2525pngBG.png')
        LBoccupiedB.setPixmap(pxp)
        LBoccupiedB.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        LBoccupiedB.move(1325, 20)

        LBcaptureW = QLabel(self)
        LBcaptureW.setText("")
        pxp = QPixmap('data/LBcaptureW2525pngG.png')
        LBcaptureW.setPixmap(pxp)
        LBcaptureW.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        LBcaptureW.move(1290, 110)

        LBoccupiedW = QLabel(self)
        LBoccupiedW.setText("")
        pxp = QPixmap('data/LBoccupied2525pngWG.png')
        LBoccupiedW.setPixmap(pxp)
        LBoccupiedW.setAlignment(Qt.AlignCenter | Qt.AlignCenter)
        LBoccupiedW.move(1325, 110)

        Open = QPushButton('', self)
        Open.setToolTip('Open New')
        Open.setIcon(QIcon('data/open.png'))
        Open.setIconSize(QSize(40, 40))
        Open.setCursor(Qt.ArrowCursor)
        Open.move(1375, 10)
        Open.clicked.connect(self.Open_on_click)

        Save = QPushButton('', self)
        Save.setToolTip('Save')
        Save.setIcon(QIcon('data/save.png'))
        Save.setIconSize(QSize(40, 40))
        Save.setCursor(Qt.ArrowCursor)
        Save.move(1375, 60)
        Save.clicked.connect(self.Save_on_click)

        Orderdown = QPushButton('', self)
        Orderdown.setToolTip('GO down orderly manner')
        Orderdown.setIcon(QIcon('data/OrderDown4040png.png'))
        Orderdown.setIconSize(QSize(40, 40))
        Orderdown.setCursor(Qt.ArrowCursor)
        Orderdown.move(1375, 260)
        Orderdown.clicked.connect(self.Orderdown_on_click)

        NUMonoff = QPushButton('', self)
        NUMonoff.setToolTip('GO Number')
        NUMonoff.setIcon(QIcon('data/gonumber4040png.png'))
        NUMonoff.setIconSize(QSize(40, 40))
        NUMonoff.setCursor(Qt.ArrowCursor)
        NUMonoff.move(1375, 110)
        NUMonoff.clicked.connect(self.NUMonoff_on_click)

        Option = QPushButton('', self)
        Option.setToolTip('Option')
        Option.setIcon(QIcon('data/option4040png.png'))
        Option.setIconSize(QSize(40, 40))
        Option.setCursor(Qt.ArrowCursor)
        Option.move(1375, 160)
        Option.clicked.connect(self.Option_on_click)

        Help = QPushButton('', self)
        Help.setToolTip('Help')
        Help.setIcon(QIcon('data/help4040png.png'))
        Help.setIconSize(QSize(40, 40))
        Help.setCursor(Qt.ArrowCursor)
        Help.move(1375, 210)
        Help.clicked.connect(self.Help_on_click)

        Exit = QPushButton('', self)
        Exit.setToolTip('Exit')
        Exit.setIcon(QIcon('data/exit4040png.png'))
        Exit.setIconSize(QSize(40, 40))
        Exit.setCursor(Qt.ArrowCursor)
        Exit.move(1375, 900)
        Exit.clicked.connect(self.Exit_on_click)

        self.show()

# -----------------------------------------------------------------------------

    def Open_on_click(self):

        self.setCursor(Qt.CrossCursor)
        goinit()

        GODATA(self)

        global GODNO
        GODNO = 0

        computerdown(self)

        #self.qTimer = QTimer()
        # self.qTimer.setInterval(1000)  # 1000 ms = 1 s
        # self.qTimer.timeout.connect(self.computerdown)
        # self.qTimer.start()

# -----------------------------------------------------------------------------

    def Orderdown_on_click(self):

        self.setCursor(Qt.ArrowCursor)
        goinit()
        GODATA(self)

        self.qTimer = QTimer()
        self.qTimer.setInterval(1000)  # 1000 ms = 1 s
        self.qTimer.timeout.connect(self.GOORDERDOWNtimerTick)
        self.qTimer.start()


# -----------------------------------------------------------------------------


    def GOORDERDOWNtimerTick(self):

        global GODNO
        global FrameTitle
        global timestr
        global timestring
        global GoStartTime
        global GPDtxtName
        global PLAYTYPE, GOPLAYFILENO

        if(True):
            if(GODNO == 361):
                GoPlayDataTextSave()
                ScreenWindow(self)
                goinit()
                self.update()
            if(GODNO == 1):
                timestr = datetime.datetime.now()
                timestring = time.strftime("%Y%m%d%H%M%S", time.localtime())
                GoStartTime = ""
                GoStartTime = timestring
                GPDtxtName = ""
                GPDtxtName = timestring
                GOPLAYFILENO += 1
                GODATA(self)
                self.update()

            try:

                GOorderdown(self)

            except Exception as e:
                print('Error:', e)
            # else:
            #    print("Nothing went wrong")
            # finally:
            #    print('最終要執行的代碼')


# -----------------------------------------------------------------------------


    def Save_on_click(self):
        print('Save button click')
        TEXTDIS(self, "尚未設定!")


# -----------------------------------------------------------------------------


    def NUMonoff_on_click(self):
        global NUMONOFF
        NUMONOFF += 1
        if(NUMONOFF > 4):
            NUMONOFF = 0
        self.update()


# -----------------------------------------------------------------------------


    def Option_on_click(self):
        print('Option button click')
        TEXTDIS(self, "尚未設定!")


# -----------------------------------------------------------------------------


    def Help_on_click(self):
        print('Help button click')
        TEXTDIS(self, "尚未設定!")


# -----------------------------------------------------------------------------

    def Exit_on_click(self):
        print('Exit button click')
        sys.exit(app.exec_())

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
    def paintEvent(self, event):
        painter = QPainter(self)

        pixmap = QPixmap("data/pp13641029png.png")
        painter.drawPixmap(0, 0, 1364, 1029, pixmap)

        global POSX, POSY, GOW, GOH, NUMONOFF, GODX, GODY
        global BDBW, BDSN, BDGN, GODNO, SPTYPE
        global BTime, BTimenew, WTime, WTimenew
        global WWIN, WWINTOTAL, BWIN, BWINTOTAL
        global SD

        if(PLAYTYPE == 0):  # if(PLAYTYPE == 0):
            GBINITDIS(self)

        for xx in range(1, 20):
            x = int(xx)
            for yy in range(1, 20):
                y = int(yy)

                if (BDBW[x][y] == 2):
                    try:
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GOW5151png.png")
                        painter.drawImage(rect, image)
                    except Exception as e:
                        print('Error: ', e)
                    if(NUMONOFF == 4):
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        if(x == GODX and y == GODY):
                            painter.setPen(QPen(Qt.red, 1))
                            rect = QRect(POSX[GODX]+11, POSY[GODY]+15, 25, 15)
                            painter.drawText(rect, Qt.AlignCenter, "2")
                        else:
                            painter.setPen(QPen(Qt.black, 1))
                            rect = QRect(POSX[x]+11, POSY[y]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDBW[x][y]))
                    elif(NUMONOFF == 3):
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        if(x == GODX and y == GODY):
                            painter.setPen(QPen(Qt.red, 1))
                            rect = QRect(POSX[GODX]+11, POSY[GODY]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDSN[GODX][GODY]))
                        else:
                            painter.setPen(QPen(Qt.black, 1))
                            rect = QRect(POSX[x]+11, POSY[y]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDSN[x][y]))
                    elif(NUMONOFF == 2):
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        if(x == GODX and y == GODY):
                            painter.setPen(QPen(Qt.red, 1))
                            rect = QRect(
                                POSX[GODX]+11, POSY[GODY]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(GODNO))
                        else:
                            painter.setPen(QPen(Qt.black, 1))
                            rect = QRect(POSX[x]+11, POSY[y]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDGN[x][y]))
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        painter.setPen(QPen(Qt.green, 1))
                        for t in range(1, 20):
                            rect = QRect(1+t*GOW, 5, 15, 15)  # 上
                            painter.drawText(
                                rect, Qt.AlignCenter, xtext[t])
                            rect = QRect(1+t*GOW, 1005, 15, 15)  # 下
                            painter.drawText(
                                rect, Qt.AlignCenter, xtext[t])
                            rect = QRect(5, t*GOH, 15, 15)  # 左
                            painter.drawText(
                                rect, Qt.AlignCenter, ytext[t])
                            rect = QRect(1005, t*GOH, 15, 15)  # 右
                            painter.drawText(
                                rect, Qt.AlignCenter, ytext[t])
                    elif(NUMONOFF == 1):
                        if(x == GODX and y == GODY):
                            rect = QRect(GODX*GOW, GODY*GOH, 10, 10)
                            painter.fillRect(rect, Qt.red)
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        painter.setPen(QPen(Qt.green, 1))
                        for t in range(1, 20):
                            rect = QRect(1+t*GOW, 5, 15, 15)  # 上
                            painter.drawText(
                                rect, Qt.AlignCenter, xtext[t])
                            rect = QRect(1+t*GOW, 1005, 15, 15)  # 下
                            painter.drawText(
                                rect, Qt.AlignCenter, xtext[t])
                            rect = QRect(5, t*GOH, 15, 15)  # 左
                            painter.drawText(
                                rect, Qt.AlignCenter, ytext[t])
                            rect = QRect(1005, t*GOH, 15, 15)  # 右
                            painter.drawText(
                                rect, Qt.AlignCenter, ytext[t])
                    # if(NUMONOFF == 0):
                    else:
                        if(x == GODX and y == GODY):
                            rect = QRect(GODX*GOW, GODY*GOH, 10, 10)
                            painter.fillRect(rect, Qt.red)

                elif (BDBW[x][y] == 1):
                    try:
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GOB5151png.png")
                        painter.drawImage(rect, image)
                        BDBWed = 1
                    except Exception as e:
                        print('Error: ', e)
                    if(NUMONOFF == 4):
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        if(x == GODX and y == GODY):
                            painter.setPen(QPen(Qt.red, 1))
                            rect = QRect(POSX[GODX]+11, POSY[GODY]+15, 25, 15)
                            painter.drawText(rect, Qt.AlignCenter, "1")
                        else:
                            painter.setPen(QPen(Qt.white, 1))
                            rect = QRect(POSX[x]+11, POSY[y]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDBW[x][y]))
                    elif(NUMONOFF == 3):
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        if(x == GODX and y == GODY):
                            painter.setPen(QPen(Qt.red, 1))
                            rect = QRect(POSX[GODX]+11, POSY[GODY]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDSN[GODX][GODY]))
                        else:
                            painter.setPen(QPen(Qt.white, 1))
                            rect = QRect(POSX[x]+11, POSY[y]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDSN[x][y]))
                    elif(NUMONOFF == 2):
                        font = QFont("Arial", 12, QFont.Normal)
                        painter.setFont(font)
                        if(x == GODX and y == GODY):
                            painter.setPen(QPen(Qt.red, 1))
                            rect = QRect(
                                POSX[GODX]+11, POSY[GODY]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(GODNO))
                        else:
                            painter.setPen(QPen(Qt.white, 1))
                            rect = QRect(POSX[x]+11, POSY[y]+15, 25, 15)
                            painter.drawText(
                                rect, Qt.AlignCenter, str(BDGN[x][y]))
                    elif(NUMONOFF == 1):
                        if(x == GODX and y == GODY):
                            rect = QRect(GODX*GOW, GODY*GOH, 10, 10)
                            painter.fillRect(rect, Qt.red)
                    else:  # if(NUMONOFF == 0):
                        if(x == GODX and y == GODY):
                            rect = QRect(GODX*GOW, GODY*GOH, 10, 10)
                            painter.fillRect(rect, Qt.red)

                # if (BDBW[x][y] == 0):
                else:
                    if(SPTYPE[x][y] == 1):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB015151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 2):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB085151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 3):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB075151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 4):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB065151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 5):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB055151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 6):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB045151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 7):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB035151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 8):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB025151png.png")
                        painter.drawImage(rect, image)
                    elif(SPTYPE[x][y] == 9):
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB095151png.png")
                        painter.drawImage(rect, image)
                    else:
                        rect = QRect(POSX[x], POSY[y], GOW, GOH)
                        image = QImage("data/GB105151png.png")
                        painter.drawImage(rect, image)

        if (GODNO % 2 == 1):
            font = QFont("Arial", 20, QFont.Normal)
            painter.setFont(font)
            painter.setPen(QPen(Qt.black, 1))
            rect = QRect(1040, 15, 50, 50)
            painter.drawText(rect, Qt.AlignCenter, str(GODNO))
        else:  # if (GODNO % 2 == 0):
            font = QFont("Arial", 20, QFont.Normal)
            painter.setFont(font)
            painter.setPen(QPen(Qt.black, 1))
            rect = QRect(1040, 115, 50, 50)
            painter.drawText(rect, Qt.AlignCenter, str(GODNO))

        font = QFont("Arial", 12, QFont.Normal)
        painter.setFont(font)
        painter.setPen(QPen(Qt.darkGreen, 1))  # darkGreen green
        rect = QRect(1125, 20, 175, 25)
        painter.drawText(rect, Qt.AlignCenter, BTime)

        font = QFont("Arial", 12, QFont.Normal)
        painter.setFont(font)
        painter.setPen(QPen(Qt.blue, 1))
        rect = QRect(1100, 60, 200, 25)
        painter.drawText(rect, Qt.AlignLeft, str(BTimenew))

        font = QFont("Arial", 12, QFont.Normal)
        painter.setFont(font)
        painter.setPen(QPen(Qt.darkGreen, 1))  # green darkGreen
        rect = QRect(1125, 110, 175, 25)
        painter.drawText(rect, Qt.AlignCenter, WTime)

        font = QFont("Arial", 12, QFont.Normal)
        painter.setFont(font)
        painter.setPen(QPen(Qt.blue, 1))
        rect = QRect(1100, 150, 200, 25)
        painter.drawText(rect, Qt.AlignLeft, str(WTimenew))

        font = QFont("Arial", 12, QFont.Normal)
        painter.setFont(font)
        painter.setPen(QPen(Qt.red, 1))
        rect = QRect(1290, 50, 25, 25)
        painter.drawText(rect, Qt.AlignCenter, str(WWIN))
        rect = QRect(1325, 50, 25, 25)
        painter.drawText(rect, Qt.AlignCenter, str(WWINTOTAL))
        rect = QRect(1290, 140, 25, 25)
        painter.drawText(rect, Qt.AlignCenter, str(BWIN))
        rect = QRect(1325, 140, 25, 25)
        painter.drawText(rect, Qt.AlignCenter, str(BWINTOTAL))

        global SD
        for b in range(0, 33):
            rect = QRect(1035, 200+b*25, 325, 24)
            painter.fillRect(rect, Qt.white)
            font = QFont("Arial", 12, QFont.Normal)
            painter.setFont(font)
            painter.setPen(QPen(Qt.darkBlue, 1))
            rect = QRect(1035, 200+b*25, 325, 24)
            painter.drawText(rect, Qt.AlignLeft, SD[b])

# ----------------------------------------------------------------------------------------
    def mousePressEvent(self, event):
        # 鼠标左键按下
        if event.button() == Qt.LeftButton:
            self.lastPoint = event.pos()
            self.endPoint = self.lastPoint
            # 进行重新绘制
            # self.update()

# ------------------------------------------------------------------------
#    def mouseMoveEvent(self, event):
#        # 鼠标左键按下的同时移动鼠标
#        if event.buttons() and Qt.LeftButton:
#            self.endPoint = event.pos()
#        # 进行重新绘制
#        self.update()

# ------------------------------------------------------------------------
        # def mouseReleaseEvent( self, event):
        # 鼠标左键释放
        #	if event.button() == Qt.LeftButton :
        #		self.endPoint = event.pos()
        # 进行重新绘制
        # self.update()


# ------------------------------------------------------------------------

    def mouseReleaseEvent(self, event):

        global GODX, GODY, GODNO, SD, StringDim, played
        global TimeCheck, TimeCount, PlayModel, TypeNum

        # GODNO += 1
        played = 0
        # -------------------------------------------------------------
        if(PLAYTYPE == 1 and GODNO > 0 and GODNO % 2 == 1):  # 黑先白後
            if (event.button() == Qt.LeftButton):
                self.endPoint = event.pos()

                aa = int(int(self.endPoint.x()) / GOW)
                bb = int(int(self.endPoint.y()) / GOH)
                print(aa)
                print(bb)
                if (aa > 0 and bb > 0 and aa < 20 and bb < 20 and BDBW[aa][bb] == 0):

                    GODNO += 1
                    print(GODNO)

                    TimeCheck = 0
                    BWTimeChange(self)

                    BDBW[aa][bb] = 2  # 白棋
                    BDGN[aa][bb] = GODNO

                    GODX = aa
                    GODY = bb
                    SDtext = str(GODNO) + ' , ' + \
                        str(xtext[aa]) + ' , ' + str(bb)
                    TEXTDIS(self, SDtext)

                    TimeCount += 1
                    TimeCheck = 1
                    BWTimeChange(self)

                    computerdown(self)

                    self.update()


# --------------------------------------------------------------------------
if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Example()
    ex.show()
    sys.exit(app.exec_())
